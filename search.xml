<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客material主题使用指南</title>
      <link href="/2019/08/16/blog/"/>
      <url>/2019/08/16/blog/</url>
      
        <content type="html"><![CDATA[<p>前端挺好玩的</p><a id="more"></a><p>git和github的操作，Hexo的操作，搭建过程有空会补。</p><h1 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h1><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>主题实现好了一些评论的配置，具体看主题的文档即可。</p><blockquote><p><a href="https://gitalk.github.io" target="_blank" rel="noopener">Gitalk</a> 和 Gitment 一样都是一个基于 GitHub Issue 的评论系统。在完成 GitHub Oauth App 的申请并获取 key 后，在主题配置文件中填入 <code>gitalk_repo</code> <code>gitalk_owner</code> <code>gitalk_client_id</code> <code>gitalk_client_secret</code> 参数即可。</p></blockquote><p>在主题配置文件里修改这几项即可，repo可以用博客的，后两项需要用到<code>GitHub Oauth App</code>的API，搜索引擎自行解决即可。</p><pre><code class="yml">comment:    use: gitalk    gitalk_repo: # git repo of the hexo    gitalk_owner: # git repo&#39;s owner    gitalk_client_id:  # github app client id    gitalk_client_secret:  # github app client secret</code></pre><h2 id="Blog内容搜索"><a href="#Blog内容搜索" class="headerlink" title="Blog内容搜索"></a>Blog内容搜索</h2><p>安装<code>hexo-generator-search</code>插件</p><p>修改主题配置文件</p><pre><code class="yml">search:    use: local    swiftype_key:</code></pre><p>修改hexo配置文件：</p><pre><code class="yml">search:    path: search.xml    field: all</code></pre><h2 id="markdown文件名大小写问题"><a href="#markdown文件名大小写问题" class="headerlink" title="markdown文件名大小写问题"></a>markdown文件名大小写问题</h2><p>参考：<a href="https://perphyyoung.github.io/2018/09/27/hexo-faq/" target="_blank" rel="noopener">Hexo 常见问题 | py’s blog</a></p><p>问题：<br>当在本地改变<code>md</code>文件的大小写时，部署到<code>GitHub</code> 上后，改变了文件名的博客不能被访问。<br>原因：<br><code>Hexo</code>默认的<code>git</code>操作会忽略大小写。<br>解决：</p><ol><li>修改根目录下<code>.deploy_git/.git/config</code>文件，将<code>ignorecase</code>的值由<code>true</code>改为<code>false</code></li><li>删除<code>.deploy_git</code>目录下除<code>.git</code>目录外的其他文件</li><li><code>cd</code>到<code>.deploy_git</code>目录下，手动做一次推送<pre><code>git add .git commit -m &quot;delete all hexo generated files&quot;git push</code></pre></li><li>重新生成并部署<pre><code>hexo ghexo d</code></pre></li></ol><h2 id="一些css"><a href="#一些css" class="headerlink" title="一些css"></a>一些css</h2><h3 id="文章框体透明"><a href="#文章框体透明" class="headerlink" title="文章框体透明"></a>文章框体透明</h3><p>打开<code>Blog\themes\hexo-theme-material-1.5.6\source\css</code>打开<code>style.min.css</code>搜索<code>#scheme-Paradox .material-layout .mdl-card</code>的第一项，在其中添加<code>background-color: rgba(255,255,255,0.8) !important;</code></p><h3 id="Tag颜色及悬停颜色"><a href="#Tag颜色及悬停颜色" class="headerlink" title="Tag颜色及悬停颜色"></a>Tag颜色及悬停颜色</h3><pre><code class="css">.material-tagscloud a{        background-color: rgba(255,255,255,.9);        text-decoration:none;        padding: 1px 9px;        margin: 9px 1px;        line-height: 40px;        white-space: nowrap;        transition: .6s;        opacity: .85;    }</code></pre><pre><code class="css">.material-tagscloud a:hover{        transition: .6s;        opacity: 1;        background: rgba(156,241,150,.7) !important;        box-shadow: 0 2px 2px 0 rgba(0,0,0,.14), 0 3px 1px -2px rgba(0,0,0,.2), 0 1px 5px 0 rgba(0,0,0,.12);    }</code></pre><h3 id="copyright位置"><a href="#copyright位置" class="headerlink" title="copyright位置"></a>copyright位置</h3><pre><code class="css">#scheme-Paradox .mdl-mini-footer--right-section {    margin-right: 25px;}</code></pre><pre><code class="css">#scheme-Paradox #copyright {    margin-left: auto;    margin-right: 25px;    text-align: center;}</code></pre><h2 id="mathjax"><a href="#mathjax" class="headerlink" title="mathjax"></a>mathjax</h2><p>主题配置文件中的<code>mathjax</code> 引用cdn<code>https://cdn.bootcss.com/mathjax/2.7.0/MathJax.js</code><br>$\LaTeX$换行因为某些网页的原因把<code>\\</code>换为<code>\\\\</code>即可</p><h2 id="鼠标点击烟花特效"><a href="#鼠标点击烟花特效" class="headerlink" title="鼠标点击烟花特效"></a>鼠标点击烟花特效</h2><p><code>themes/主体名称/source/js/src</code>新建<code>fireworks.js</code>文件</p><pre><code class="js">&quot;use strict&quot;;function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t&lt;e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl){var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)}&quot;use strict&quot;;function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t&lt;e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl){var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)};</code></pre><p>在<code>themes/主体名称/layout/_layout.swig/ejs</code>的<code>&lt;/body&gt;</code>上方添加</p><pre><code class="ejs">&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</code></pre><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>咕了很久全忘了，觉得以后再修blog就凉了，有空就填。</p><h2 id="修完没记"><a href="#修完没记" class="headerlink" title="修完没记"></a>修完没记</h2><p>live2d</p><p>代码高亮</p><p>sns链接</p><p>功能页面</p><p>material图标</p><h2 id="没修"><a href="#没修" class="headerlink" title="没修"></a>没修</h2><p>rss订阅</p><p>代码复制功能</p><p>独立页面</p><p>网易云音乐</p><p>鼠标特效fireworks遮挡</p><p>文章头图自定义</p><p>js时间统计，页脚动态效果</p><p> hexo-addlink</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><code>git clone repo</code></p><p><code>git clone -b branch_name repo</code></p><hr><p><code>git add .</code></p><p><code>git commit -m &#39;update_name&#39;</code></p><p><code>git push origin branch_name</code></p><hr><p><code>hexo init</code></p><p><code>hexo clean g d</code></p><p><code>hexo s</code></p><p><code>hexo new name categories</code></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><a href="https://zdran.com/20180326.html" target="_blank" rel="noopener">https://zdran.com/20180326.html</a></p><h3 id="创建源文件git目录"><a href="#创建源文件git目录" class="headerlink" title="创建源文件git目录"></a>创建源文件git目录</h3><pre><code> git init git remote add origin https://github.com/xx/xx.github.io // 填入你的repo地址</code></pre><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre><code> git checkout -b branch_name git add . git commit -m &#39;add branch_name&#39; git push origin branch_name</code></pre><p>切换分支<code>git checkout branch_name</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速傅里叶变换笔记</title>
      <link href="/2019/08/15/FFT/"/>
      <url>/2019/08/15/FFT/</url>
      
        <content type="html"><![CDATA[<p>FFT</p><a id="more"></a><iframe src="//player.bilibili.com/player.html?aid=19141078&cid=31220967&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="false" width="360px" height="560px"> </iframe><p>测试一下视频，然而貌似只有<code>bilibili</code>的外链比较好，然而鬼畜的二维码与顶部链接比前几年在<code>mcbbs</code>看的时候烂多了。</p><hr><p>在<code>2019年8月15日</code>，终于看懂了<code>FFT</code>的推导过程。</p><p>首先是FFT的板子，这个写法其实挺好看<del>很鬼畜</del>的。</p><pre><code class="c++">#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;complex&gt;#define R registerusing namespace std;const int N = 4.2e6;const double PI = acos(-1);int n, r[N];class C {public:    double r, i;    C() { r = i = 0; }    C(R double x, R double y) { r = x; i = y; }    C operator + (R C&amp; x) { return C(r+x.r, i+x.i); }    C operator - (R C&amp; x) { return C(r-x.r, i-x.i); }    C operator * (R C&amp; x) { return C(r*x.r-i*x.i, r*x.i+i*x.r); }    void operator += (R C&amp; x) { r += x.r; i += x.i; }    void operator *= (R C&amp; x) { R double t = r; r = r*x.r-i*x.i; i = t*x.i+i*x.r; }}f[N], g[N];inline void FFT(R C *a, R int op){    R C W, w, t, *a0, *a1;    R int i, j, k;    for (i = 0; i &lt; n; ++i)        if (i &lt; r[i]) t = a[i], a[i] = a[r[i]], a[r[i]] = t;    for(i = 1; i &lt; n; i &lt;&lt;= 1)        for(W = C(cos(PI/i), sin(PI/i) * op), j = 0; j &lt; n; j += i &lt;&lt; 1)            for(w = C(1, 0), a1 = i + (a0 = a + j), k = 0; k &lt; i; ++k, ++a0, ++a1, w*=W)                t = *a1 * w, *a1 = *a0 - t, *a0 += t;}int main(){    R int m, i, l = 0;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    for(i = 0; i &lt;= n; i++) scanf(&quot;%lf&quot;, &amp;f[i].r);    for(i = 0; i &lt;= m; i++) scanf(&quot;%lf&quot;, &amp;g[i].r);    for(m += n, n = 1; n &lt;= m; n &lt;&lt;= 1, ++l);    for(i = 0; i &lt; n; ++i) r[i] = (r[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (l - 1));    FFT(f, 1); FFT(g, 1);    for(i = 0; i &lt; n; ++i) f[i] *= g[i];    FFT(f, -1);    for(i = 0; i &lt;= m; ++i) printf(&quot;%.0lf &quot;, fabs(f[i].r) / n);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFT </tag>
            
            <tag> NTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划笔记</title>
      <link href="/2019/08/14/dp/"/>
      <url>/2019/08/14/dp/</url>
      
        <content type="html"><![CDATA[<p>随缘的dp</p><a id="more"></a><p>随意记点动态规划的方程，大概是NOIP难度的。</p><hr><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><h2 id="水题"><a href="#水题" class="headerlink" title="水题"></a>水题</h2><h3 id="Luogu-P1472-奶牛家谱-Cow-Pedigrees"><a href="#Luogu-P1472-奶牛家谱-Cow-Pedigrees" class="headerlink" title="Luogu P1472 奶牛家谱 Cow Pedigrees"></a>Luogu P1472 奶牛家谱 Cow Pedigrees</h3><p>题意：有$n$个结点$k$层的二叉树结构个数，树只能有$2$个儿子或$0$个儿子。</p><p>设$dp[n][k]$为有$n$个结点不到$k$层的答案，则答案容斥一下为$dp[n][k]-dp[n][k-1]$，转移从下把两棵树连接到上一层结点，枚举$t$为左子树节点个数，则右子树为$总结点个数-t-1$(1是减掉根)，乘法原理把两个乘起来，方程为<br>$$<br>dp[i][j]=\sum dp[t][j-1]\times dp[i-t-1][j-1]<br>$$</p><h2 id="正常题"><a href="#正常题" class="headerlink" title="正常题"></a>正常题</h2><h3 id="Luogu-P2495-SDOI2011-消耗战"><a href="#Luogu-P2495-SDOI2011-消耗战" class="headerlink" title="Luogu P2495 [SDOI2011]消耗战"></a>Luogu P2495 [SDOI2011]消耗战</h3><p>题意：给定$n$个点有边权的树，割断边花费边权，求使$k$个点与$1$点不连通的最小花费。</p><p>要用虚树做，写一下方程。</p><p>设$dp[n]$为使以$n$为结点的子树内关键点都不与$n$联通的最小花费，方程为<br>$$<br>dp[u]=dp[u]+<br>\begin{cases}<br>\min(dp[v],dist_{u,v})&amp; \text{v不是关键点}\\<br>dist_{u,v}&amp; \text{v是关键点}<br>\end{cases}<br>$$</p><h3 id="Luogu-P2606-ZJOI2010-排列计数"><a href="#Luogu-P2606-ZJOI2010-排列计数" class="headerlink" title="Luogu P2606 [ZJOI2010]排列计数"></a>Luogu P2606 [ZJOI2010]排列计数</h3><p>题意：求一个$1\sim n$的排列$P_i$使$ 1\leq  i \leq n$时$P_i&gt;P_{i/2}$的方案数。</p><p>直接做没什么思路，可以想一下除二的关系可以是二叉树，于是换到树上来做，求$n$个节点的二叉树满足小根堆性质树的个数。</p><p>设$dp[i]$表示以$i$为根的子树内满足小根堆性质的方案数，$s[i]$为树结点数，提前把一些越界的初值设为$1$以免判断，转移时组合数算一下选给左子树的点，记得减去根节点，乘一下两颗子树的方案数就ok了，组合数要用lucas，方程</p><p>$$<br>dp[i]=C_{s[i]-1}^{s[i\times 2]}dp[i\times 2]dp[i\times 2+1]<br>$$</p><h3 id="Luogu-P2473-SCOI2008-奖励关"><a href="#Luogu-P2473-SCOI2008-奖励关" class="headerlink" title="Luogu P2473 [SCOI2008]奖励关"></a>Luogu P2473 [SCOI2008]奖励关</h3><p>题意：$m$种物品，给你n次随机在$1\sim m$间的物品，每种物品有价值并且选这种物品需要你在前$n-1$次把集合$S$内的物品种类都选过一次才可以选。</p><p>显然$m$非常小，那么求期望直接枚举就可以了，这样就好做了，然后在考虑一下如果顺推的话需要保证$S$的合法性，这个比较难处理，那么逆推显然更好写。设$dp[i][S]$表示取前$i-1$次的状态为$S$是期望的最大值，$pre[i]$为第$i$种物品的前提集合，方程枚举第i个选第k种<br>$$<br>dp[i][S]=dp[i][S]+<br>\begin{cases}<br>\max(dp[i+1][S],dp[i+1][S|(1&lt;&lt;(k-1))]+val[k])&amp; pre[i]\subseteq S \\<br>dp[i+1][S]&amp; pre[i]\nsubseteq  S<br>\end{cases}<br>$$</p><p>每次$dp[i][S]$转移完之后变成$\dfrac{dp[i][S]}{n}$来求期望，答案是$dp[1][0]$.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的C++学习</title>
      <link href="/2019/08/09/C++/"/>
      <url>/2019/08/09/C++/</url>
      
        <content type="html"><![CDATA[<p><code>Visual Studio</code>过于复杂</p><a id="more"></a><p>装了一下之前很久以前装过一次却没用过的Visual Studio，打算随便学一下C++的OOP还有一些C++11的语法？然后学下C++的图形界面的库，然后随便玩玩？那大概就是这样吧。随便记点不好记的语法方便查一下然后记一下现在还不大会用的vs的操作方便以后忘了再查。</p><p>参考<a href="https://www.runoob.com/cplusplus" target="_blank" rel="noopener">C++ 教程 | 菜鸟教程</a>先看一遍然后记点容易忘的。</p><p>其实还有一本<code>C++ Primer Plus</code>不过现在大概是没时间看了</p><h1 id="C-OOP"><a href="#C-OOP" class="headerlink" title="C++ OOP"></a>C++ OOP</h1><h2 id="类-对象"><a href="#类-对象" class="headerlink" title="类 对象"></a>类 对象</h2><p><code>class Hf{...};</code>定义一个类</p><p><code>Hf xxx;</code>声明一个类型为<code>Hf</code>的对象</p><p>访问数据成员用<code>.</code>即可</p><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p>类定义内部的成员函数默认<code>inline</code></p><p>在类的外部定义函数的话用范围解析运算符<code>::</code>定义成员函数</p><pre><code class="c++">数据类型 类名::函数名() {}</code></pre><p>调用函数用<code>.</code> 即可</p><h3 id="类访问修饰符"><a href="#类访问修饰符" class="headerlink" title="类访问修饰符"></a>类访问修饰符</h3><p><code>public</code>公有成员在程序中类的外部是可访问的。您可以不使用任何成员函数来设置和获取公有变量的值</p><p><code>private</code><strong>私有</strong>成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。</p><p><code>protected</code><strong>保护</strong>成员变量或函数与私有成员十分相似，但有一点不同，保护成员在派生类（即子类）中是可访问的。</p><hr><p>1.<strong>public 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private</p><p>2.<strong>protected 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private</p><p>3.<strong>private 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private</p><hr><p>1.private 成员只能被本类成员（类内）和友元访问，不能被派生类访问；</p><p>2.protected 成员可以被派生类访问。</p><h3 id="类构造函数-amp-析构函数"><a href="#类构造函数-amp-析构函数" class="headerlink" title="类构造函数 &amp; 析构函数"></a>类构造函数 &amp; 析构函数</h3><p>构造函数就定义一个函数名为类名没有数据类型的函数，每次创建类的新对象时执行，默认是存在构造函数，所以如果定义了有参数的构造函数，一定注意要再定义一个无参数无内容的构造函数，不然不用带参数的构造函数用默认创建对象的话会出错.<br>像这样玩就行，赋值可以像这样搞.</p><pre><code class="c++">struct node {    int o, l, r, t;    node() {}    node(int o, int l, int r): o(o), l(l), r(r), t(ask(l, r)) {}    friend bool operator &lt; (const node&amp; a, const node&amp; b) {        return sum[a.t] - sum[a.o - 1] &lt; sum[b.t] - sum[b.o - 1];    }};</code></pre><p>析构函数名字是这样的<code>~类名</code>，这个函数再删除对象时执行.<br>总之就是一个创建，一个删除时执行。</p><hr><p>前面的随便看了看就咕了不记东西了，<code>OOP</code>还有很多东西不会也没写过。</p><p>先写写<code>mfc</code>，感觉挺好玩的，得先看看常用的函数然后写点简单东西练一练。</p><p>然后想看点C++11的特性，学一下<code>auto</code>，新语法之类的，现在不是很了解。</p><p>还有想学C++网络方面的内容，以及学一下套接字、这样的网络知识和服务器相关的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论笔记</title>
      <link href="/2019/08/09/number_theory/"/>
      <url>/2019/08/09/number_theory/</url>
      
        <content type="html"><![CDATA[<p>休闲数论娱乐纪实</p><a id="more"></a><h1 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h1><p>$$(a+b) \bmod p=(a\bmod p+b\bmod p)\bmod p​$$</p><p>$$(a-b) \bmod p=(a\bmod p-b\bmod p+p)\bmod p​$$</p><p>$$(a\times b) \bmod p=(a\bmod p\times b\bmod p)\bmod p​$$</p><p>求$\dfrac{a}{b}\bmod p​$时,求$b^{-1}​$使$b*b^{-1}\equiv1\pmod p​$即$b​$的逆元</p><p>有$$\dfrac{a}{b}\bmod p=a\times b^{-1}\bmod p$$</p><h1 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h1><p>定理：当$p​$是质数时$a^{p-1}\equiv 1\pmod p​$</p><p>逆元：由$a^{p-1}\equiv 1\pmod p​$得$a\times a^{p-2}\equiv 1\pmod p​$</p><p>即$a^{p-1}$是$a$在模$p$意义下的逆元</p><h1 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h1><p>若$gcd(a,p)=1$则$a^{\varphi(p)}\equiv1\pmod n$</p><p>当$p$是质数时$\varphi(p)=p-1$</p><p>即$a^{p-1}\equiv1\pmod n$即费马小定理</p><h1 id="GCD-EXGCD"><a href="#GCD-EXGCD" class="headerlink" title="GCD EXGCD"></a>GCD EXGCD</h1><pre><code class="c++">#define ll long longll gcd(ll a, ll b) { return b ? gcd(b, a%b) : a; }void exgcd(ll a, ll b, ll &amp;x, ll &amp;y) {    if(!b) x = 1, y = 0;    else exgcd(b, a % b, y, x), y -= a / b * x;}</code></pre><p>$gcd$用来求解$a，b$的最大公约数</p><p>$lcm(a,b)=\dfrac{a\times b}{gcd(a,b)}​$，lcm是最大公约数</p><p>$exgcd$用来求解$ax+by=gcd(a,b)$，证明大概是化式子构造递归的解法，反正看了也早晚会忘就是了<del>逃</del></p><p>$exgcd$还可以求解$ax\equiv b\pmod p​$形式的同余方程</p><p>$exgcd(a,p,x,y)$求出来的$x$就是$a$关于$p$的逆元</p><h1 id="CRT-exCRT"><a href="#CRT-exCRT" class="headerlink" title="CRT exCRT"></a>CRT exCRT</h1><p>求解一个同余方程组<br>$$<br>\begin{cases}<br>x \equiv a_1 \pmod {m_1} \\<br>x \equiv a_2 \pmod {m_2} \\<br>x \equiv a_n \pmod {m_n}<br>\end{cases}<br>$$</p><p>两种东西都可以通过exgcd两两合并同余方程求解，不过CRT可以直接构造出答案。</p><p>CRT求解的$p​$是质数，exCRT的不是，都可以用exgcd合并做。</p><p>推导参考这个blog：<a href="http://blog.miskcoo.com/2014/09/chinese-remainder-theorem" target="_blank" rel="noopener">扩展欧几里得算法与中国剩余定理</a></p><p>CRT直接构造的解：</p><p>令$M=\prod m_i, M_i=\frac M{m_i}​$，$t_i​$为$M_i​$在模$m_i​$意义下的逆元</p><p>方程组的解为$$x \equiv \sum_{i=1}^na_it_iM_i \pmod M​$$</p><h1 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h1><p>求$n$是不是素数直接枚举$1$到$\sqrt{n}$试除</p><p>埃筛</p><pre><code class="c++">for(int i = 2; i &lt;= N; i++) if(!vis[i]) {    prime[++cnt] = i;    for(int j = 1; i * j &lt;= N; j++)           vis[i * j] = 1;}</code></pre><p>线筛</p><pre><code class="c++">for(int i = 2; i &lt;= N; i++) {    if(!vis[i]) prime[++cnt] = i;    for(int j = 1; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= N; j++) {        vis[i * prime[j]] = 1;        if(i % prime[j] == 0) break;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器 | 插件与设置</title>
      <link href="/2019/06/04/chrome/"/>
      <url>/2019/06/04/chrome/</url>
      
        <content type="html"><![CDATA[<p>好玩的Chrome</p><a id="more"></a><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>下载地址：<a href="https://www.google.cn/intl/zh-CN/chrome" target="_blank" rel="noopener">Google Chrome 网络浏览器</a></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p><code>Bookmarkie</code> 插件栏弹出收藏夹，可搜索</p><p><code>书签侧边栏</code> 侧边栏收藏夹</p><p><code>Wrona History Menu</code> 插件栏弹出历史记录，最近关闭</p><p><code>Checker Plus for Gmail™</code> 查看Google邮箱</p><p><code>Click and Save</code> 快捷键点击存图</p><p><code>CSS Peeper</code> 抓取页面样式</p><p><code>Earth View from Google Earth</code> 新页标签Google地球</p><p><code>Color Tab</code> 新页标签配色设计</p><p><code>Save All Resources</code> 下载控制台<code>Sources</code>全部文件</p><p><code>Steam Inventory Helper</code> steam网页版市场工具</p><p><code>Speedtest by Ookla</code> 墙外测速</p><p><code>Stylus</code> 替换CSS样式</p><p><code>Tampermonkey</code> 网页js脚本</p><p><code>Yet another flags</code> 查看网页ip</p><p><code>沙拉查词</code> 划词翻译</p><p><code>ImageAssistant</code> 下载网页图片</p><p><code>Yet Another Drag and Go</code> 四方向拖拽搜索，链接拖拽打开</p><p><code>pakku</code> bilibili弹幕过滤</p><p><code>Aerys</code> 插件栏查看窗口标签</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p><code>左键单击</code> = 在当前窗口打开目标网页</p><p><code>Shift + 左键单击</code> = 在新窗口打开目标网页</p><p><code>Ctrl + 左键单击</code> = 在新标签页打开目标网页</p><hr><p><code>Ctrl + Shift + T</code> = 打开上一个关闭的标签页</p><p><code>Ctrl + Shift + B</code> = 显示书签栏</p><p><code>Ctrl + D</code> = 为此页添加书签</p><p><code>Ctrl + H</code> = 历史记录</p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>不在设置里出现的控制选项： chrome://flags</p><p>查看chrome账号同步情况： chrome://sync</p><hr><p>地址栏中使用的搜索引擎改为<code>google.com.hk</code></p><h1 id="网页长截图"><a href="#网页长截图" class="headerlink" title="网页长截图"></a>网页长截图</h1><p>1.按<code>F12</code></p><p>2.按<code>Ctrl + Shift + P</code></p><p>3.输入<code>Capture full size screenshot</code>并回车</p><h2 id="截取手机版长图"><a href="#截取手机版长图" class="headerlink" title="截取手机版长图"></a>截取手机版长图</h2><p>在1、2操作之间，按下<code>Ctrl + Shift + M</code></p><h2 id="选区截图"><a href="#选区截图" class="headerlink" title="选区截图"></a>选区截图</h2><p>1.按<code>F12</code></p><p>2.按<code>Ctrl + Shift + C</code></p><p>3.选中区域后去输入<code>Capture node screenshot</code>并回车</p>]]></content>
      
      
      <categories>
          
          <category> PC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网 | GFW与SSR简介</title>
      <link href="/2019/05/31/GFW/"/>
      <url>/2019/05/31/GFW/</url>
      
        <content type="html"><![CDATA[<p>Across the Great Wall we can reach every corner in the world.</p><a id="more"></a><p>由于一些政治原因，中国的网络环境非常特殊，不仅自身进行审查，且对外来信息也会进行审查，如果需要访问境外网站，使用一些境外服务及app则需要突破审查，俗称翻墙，科学上外，搭梯子等。在10010大进行了今年来最为严厉的网络审查，在此之后一些免费的fq软件都不甚理想。<br>本文介绍GFW和常用的翻墙技术，以作备忘和对没有接触过fq的人作简单的了解。</p><p>推荐阅读：<br><a href="https://blog.nfz.moe/archives/network-in-china.html" target="_blank" rel="noopener">中国的互联网 _ neoFelhz’s Blog</a></p><p><a href="https://hynking.org/2017/01/02/The_reason/" target="_blank" rel="noopener">墙与纸飞机</a></p><h1 id="什么是GFW？"><a href="#什么是GFW？" class="headerlink" title="什么是GFW？"></a>什么是GFW？</h1><h2 id="出海光缆"><a href="#出海光缆" class="headerlink" title="出海光缆"></a>出海光缆</h2><p>中国接入$Internet$的情况：<br><a href="https://www.ruanyifeng.com/blog/2010/08/cable_world_map.html" target="_blank" rel="noopener">世界海底光缆分布图 - 阮一峰的网络日志</a></p><p>中国出海光缆有$3$条，分别在青岛、汕头、上海，那么对为数不多的出海光缆控制一下、进行一下审查，便可以达到信息封锁的目的，这个技术的缩写叫做$GFW$，经常被称为墙，曾经由某$Hf$亲自主持建设。</p><h2 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E" target="_blank" rel="noopener">防火长城 - 维基百科，自由的百科全书</a></p><p>部分内容</p><pre><code>现阶段防火长城已经具备干扰IPv6隧道的能力。2013年对代码托管网站GitHub的审查和封锁2013年1月20日，中国大陆政府的防火长城利用域名污染和关键词过滤等手段屏蔽GitHub。但是，由于屏蔽引发了社会的强烈反应，最终解除了对GitHub的屏蔽。Steam社区网站被屏蔽Steam是世界最大的PC数字游戏平台，其社区网站被用于讨论和分享游戏经验。Steam在中国也有着庞大的用户群，根据Steam Spy2017年底的报告，Steam的中国区玩家已经突破3000万，其不受中国监管的社群被认为带来了监管方面的挑战。Steam自2015年开启人民币结算以来，曾多次因部分网民在社区发表违反中国法律的内容而遭到屏蔽，在Valve配合删除相关违规言论并封禁违规用户后均解除了屏蔽。但自2017年12月16日起，Steam除了商店，其他功能（社区、市场、库存、创意工坊）均被屏蔽，方法是DNS污染和SNI RST，该屏蔽至今仍未解除，玩家需要使用加速器或在修改hosts的同时使用本地反向代理等工具才能访问，但中国大陆部分地区的用户即使是使用了加速器或本地反向代理，在访问社区的时候仍然会提示“您所在的地区不支持”，原因未知。</code></pre><p>技术</p><pre><code>主要技术2.1    域名解析服务缓存污染2.2    IP地址或传输层端口封锁2.2.1    针对TCP和UDP连接的封锁2.2.2    针对UDP连接的干扰2.3    TCP连接重置2.3.1    针对HTTP协议的关键字阻断2.3.2    针对TLS的SNI阻断2.3.3    针对TLS的证书传输检测2.3.4    对eD2k协议的连接干扰2.4    其他2.4.1    对破网软件的反制2.4.1.1    针对Tor的刺探2.4.2    间歇性完全封锁2.4.2.1    间歇性封锁国际出口2.4.2.2    境内骨干路由器间歇性阻断2.4.3    深度包检测2.4.4    针对IPv6协议的审查2.4.5    对电子邮件通讯的拦截2.4.6    网络攻击</code></pre><p>硬件</p><pre><code>据2010年的估计，防火长城可能拥有数百台曙光4000L服务器。防火长城（北京）使用曙光4000L机群，操作系统为Red Hat系列（从7.2到7.3到AS4），周边软件见曙光4000L一般配置防火长城实验室（哈尔滨工业大学）使用曙光服务器，Red Hat操作系统防火长城（上海）使用Beowulf集群。GFW是曙光4000L的主要需求来源、研究发起者、客户、股东、共同开发者。2007年防火长城集群规模进一步扩大，北京增至360节点，上海增至128节点，哈尔滨增至64节点，共计552节点。机群间星型千兆互联。计划节点数上千。有多方证据表明防火长城（广州）存在，但其使用的服务器和系统不确定。有理由相信防火长城（北京）拥有16套曙光4000L，每套384节点，其中24个服务和数据库节点，360个计算节点。每套价格约两千万到三千万，占005工程经费的主要部分。有3套（将）用于虚拟计算环境实验床，计千余节点。13套用于骨干网络过滤。总计6144节点，12288CPU，12288GB内存，峰值计算速度48万亿次。2 GHz CPU的主机Linux操作系统下可达到600Kbps以上的捕包率。通过骨干网实验，配置16个数据流总线即可以线速处理八路OC48（一路OC48约2.5Gbps）接口网络数据。曙光4000L单结点的接入能力为每秒65万数据包，整个系统能够满足32Gbps的实时数据流的并发接入要求。有理由相信GFW的总吞吐量为512Gbps甚至更高（北京）。</code></pre><p>典型意义下GFW的线路拓扑：</p><p><img src="/images/gfw.png" alt></p><hr><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E8%A2%AB%E5%B0%81%E9%94%81%E7%BD%91%E7%AB%99%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">中华人民共和国被封锁网站列表 - 维基百科，自由的百科全书</a></p><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%A1%E6%9F%A5" target="_blank" rel="noopener">中华人民共和国网络审查 - 维基百科，自由的百科全书</a></p><p>其他：<br>面对 HTTPS 加密，GFW 的敏感词过滤失效。</p><h2 id="其他名词"><a href="#其他名词" class="headerlink" title="其他名词"></a>其他名词</h2><p>VPS：虚拟专用服务器（英语：Virtual private server，缩写为 VPS）<br><a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">虚拟专用服务器 - 维基百科，自由的百科全书</a></p><p>代理（英语：Proxy）也称网络代理，是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。<br>提供代理服务的计算机系统或其它类型的网络终端称为代理服务器（英文：Proxy Server）。<br><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">代理服务器 - 维基百科，自由的百科全书</a></p><p>SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是”SOCKetS”的缩写。<br><a href="https://zh.wikipedia.org/wiki/SOCKS" target="_blank" rel="noopener">SOCKS - 维基百科，自由的百科全书</a></p><p>网际协议第6版（英语：Internet Protocol version 6，缩写：IPv6）是网际协议的最新版本，用作互联网的网络层协议。用它来取代IPv4主要是为了解决IPv4地址枯竭问题，同时它也在其他方面对于IPv4有许多改进。<br><a href="https://zh.wikipedia.org/wiki/IPv6" target="_blank" rel="noopener">IPv6 - 维基百科，自由的百科全书</a></p><p>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。<br><a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="noopener">Secure Shell - 维基百科，自由的百科全书</a></p><p>超文本传输安全协议（英语：HyperText Transfer Protocol Secure，缩写：HTTPS；常称为HTTP over TLS、HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。<br><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">超文本传输安全协议 - 维基百科，自由的百科全书</a></p><p>对等式网络（peer-to-peer， 简称P2P），又称点对点技术，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网路传输中的节点，以降低资料遗失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。<br><a href="https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%AD%89%E7%B6%B2%E8%B7%AF" target="_blank" rel="noopener">点对点网络 - 维基百科，自由的百科全书</a></p><p>HTTP状态码（英语：HTTP Status Code）是用以表示网页服务器超文本传输协议响应状态的3位数字代码。<br><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">HTTP状态码 - 维基百科，自由的百科全书</a></p><p>中间人攻击（英语：Man-in-the-middle attack，缩写：MITM）在密码学和计算机安全领域中是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。<br><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">中间人攻击 - 维基百科，自由的百科全书</a></p><h1 id="如何科学上网"><a href="#如何科学上网" class="headerlink" title="如何科学上网"></a>如何科学上网</h1><p><a href="https://zh.wikipedia.org/wiki/%E7%AA%81%E7%A0%B4%E7%BD%91%E7%BB%9C%E5%AE%A1%E6%9F%A5" target="_blank" rel="noopener">突破网络审查 - 维基百科，自由的百科全书</a><br>作为修改hosts文件这一常用手段，目前基本已经失效：<br><a href="https://zh.wikipedia.org/wiki/Hosts%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">hosts文件 - 维基百科，自由的百科全书</a></p><pre><code>修改本机 hosts文件，不足之处是需要系统管理员权限（如root权限）来修改，对基于IP地址封禁的网站无效。自2018年8月份起，GFW开始启用基于SNI检测和TCP连接重置的手段进行封锁，所以修改hosts方法不再完全适用。</code></pre><p>一些相关软件的介绍</p><pre><code>相关软件蓝灯（Lantern），免费（3.x以后有付费版本，免费版4.x以后版本为每月500M，超出限速）、开源，支持多平台（Windows、Linux、Android）。蓝灯能够自动检测一个网站是否被封锁。对那些被封锁的网站，Lantern 通过自有的服务器或者未封锁地区的用户运行的 Lantern 来提供访问。赛风，免费、开源，支持多平台（Windows、Android、iOS），但链接不稳定萤火虫（Firefly），用 Go 语言编写，采取 meek 工作原理，支持多平台（Windows、Android、iOS）XXNET浏览器集成包，为进一步降低破网难度，有志愿者将Chromium、Firefox等浏览器，与已经配置好的翻墙软件（如GoAgent和Shadowsocks的客户端软件）一起打包成一键翻墙的浏览器集成包。这类浏览器集成包并不能提供高度安全的隐私保护，因为浏览器集成包的制作者可能会在制作过程中加入恶意程序。当然，这类浏览器集成包的确易于使用。洋葱路由器（Tor），同时提供暗网及代理。大蒜路由器（I2P），Tor的演进版本，基于Java技术，使用 ed2k 技术实现分布式网络避免全网封杀。代理服务器此类软件需要自行在服务器和终端上部署，比一般的翻墙方法更繁琐。Shadowsocks，简称SS，需要自行购买VPS并搭建代理服务器，用于翻墙，在坊间也有可以直接使用的帐号出售，还有合租一台VPS服务器的情况。ShadowsocksR，简称SSR，其使用方式同上，增加了混淆的特性，可使翻墙流量伪装成正常流量。ShadowsocksRR，简称SSRR，使用方法同上，与SSR相比增加了更多的混淆方式。Brook，跨平台，基于 GPL v3 协议授权。V2Ray， Project V[11]项目创作的内核，使用自实现的 Vmess 协议及 mKCP 协议，基于 MIT 协议授权。</code></pre><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E7%A7%81%E4%BA%BA%E7%B6%B2%E8%B7%AF" target="_blank" rel="noopener">虚拟专用网 - 维基百科，自由的百科全书</a></p><pre><code>虚拟私人网络（英语：Virtual Private Network，缩写：VPN）是一种常用于连接中、大型企业或团体与团体间的私人网络的通讯方法。它利用隧道协议（Tunneling Protocol）来达到保密、发送端认证、消息准确性等私人消息安全效果，这种技术可以用不安全的网络（例如：互联网）来发送可靠、安全的消息。</code></pre><p><a href="https://zh.wikipedia.org/wiki/%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">隧道协议 - 维基百科，自由的百科全书</a></p><h3 id="Lantern"><a href="#Lantern" class="headerlink" title="Lantern"></a>Lantern</h3><p><a href="https://github.com/getlantern/download" target="_blank" rel="noopener">蓝灯(Lantern)最新版本下载 Latest version of Lantern 5.3.2</a></p><h3 id="有关VPN的风险性"><a href="#有关VPN的风险性" class="headerlink" title="有关VPN的风险性"></a>有关VPN的风险性</h3><p><a href="http://www.miit.gov.cn/n1146290/n4388791/c5471946/content.html" target="_blank" rel="noopener">工业和信息化部关于清理规范互联网网络接入服务市场的通知 - 中华人民共和国工业和信息化部</a></p><pre><code>2017年1月22日，工业和信息化部发布《工业和信息化部关于清理规范互联网网络接入服务市场的通知》，规定未经电信主管部门（各一级行政区通信管理局）批准，不得自行创建或租用VPN、国际专线等其他信道开展跨境经营活动。而在境内VPN属于《商用密码管理条例》须经国家密码管理局批准。这也意味着在中国大陆的ISP、IDC或CDN提供商租用或创建VPN或国际专线开展业务，必须获取各一级行政区通信管理局的批准。</code></pre><p>但是VPN本来的作用并不是专门干这种事的，有一定的缺陷，比如流量特征可能被GFW分析。<br>2019年发生了第一例个人使用VPN访问境外网站受到行政处罚的事件，所以使用VPN将导致可能被查水表或请喝茶，而且面对GFW不断地升级及某些因素影响，一些特殊时间段可能会使VPN使用体验不佳。</p><p><a href="http://www.gdgafz.alldayfilm.com/bookDetail.html?type=1&id=1134323" target="_blank" rel="noopener">行政处罚决定书[2019]1号 - 广东公安执法信息公开平台</a></p><pre><code>2018年12月28日，广东公安执法信息公开平台公布，韶关南雄公安局发出《韶雄公(网)行罚决字 [2019]1号》文件：朱某某被警方认为“擅自创建、使用非法定信道进行国际联网”而被警告并被罚款1000元。这一行政处罚的依据是1996年颁布的《中华人民共和国计算机信息网络国际联网管理暂行规定》第六条、第十四条。</code></pre><h2 id="SS-SSR"><a href="#SS-SSR" class="headerlink" title="SS | SSR"></a>SS | SSR</h2><p>推荐阅读：<br><a href="https://www.5xiaobo.com/?id=650" target="_blank" rel="noopener">浅谈VPN和SS/SSR的区别</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>那么先来介绍一下SS与SSR：<br>全称Shadowsocks | ShadowsocksR</p><p>SS的作者Clowwindy因被喝茶而删除其GitHub的源代码，SSR是breakwa11在SS基础上开发的软件，后因某些原因作者在GitHub上将其源代码删除，二软件开发时皆开源并且原作者停止维护后有人开发并维护与更新至今。</p><h3 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h3><p>sock5协议 开源项目 跨平台<br><a href="http://shadowsocks.org/en/index.html" target="_blank" rel="noopener">官网</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Github</a></p><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>某已经删除的SSR主页（web archive）：<br><a href="https://web.archive.org/web/20170719134138/https://breakwa11.github.io/" target="_blank" rel="noopener">breakwa11.github.io</a></p><p><a href="https://github.com/breakwa11/shadowsocks-csharp/releases" target="_blank" rel="noopener">Github</a></p><p>简单了解一下：<br><a href="https://zh.wikipedia.org/wiki/Shadowsocks" target="_blank" rel="noopener">Shadowsocks - 维基百科，自由的百科全书</a></p><pre><code>Shadowsocks（简称SS）是一种基于Socks5代理方式的加密传输协议，也可以指实现这个协议的各种开发包。当前包使用Python、C、C++、C#、Go语言等编程语言开发，大部分主要实现（iOS平台的除外）采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。Shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端程序部署到服务器上面，然后通过客户端连接并创建本地代理。</code></pre><p>目前这是比较主流的工具之一，使用人数多，社区比较活跃，但技术上仍并非绝对完美，目前应对GFW足已使用。使用此软件的主要原因是配置方便及社区生态较好。</p><p>在国内社交网站上为避免审查常因其缩写称为酸酸 | 酸酸乳，而因其图标为一个纸飞机，也常称此软件为小飞机、纸飞机等。对提供服务器节点供多人使用的SSR服务提供商称为“机场”。</p><p>SSR分为服务端和客户端，如果你有境外服务器的话，可以直接安装服务端，然后在客户端上使用。当然没有的话你可能需要买个VPS这种东西，当然再然后如果你不需要服务器或没有优质服务器线路及服务器的话，也可以在“机场”获取节点服务器参数来进行使用，一些机场的使用体验比廉价vps更佳。</p><p>界面：<br><img src="/images/ssr1.png" alt></p><p><img src="/images/ssr2.png" alt></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>有Windows、Linux、Android、IOS、Macos等系统及各种在源软件基础上开发的很多版本。</p><p>一个仍在维护的Windows版本：</p><p><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><p>一些下载地址及版本介绍：</p><p><a href="https://congcong0806.github.io/2018/04/20/SS/" target="_blank" rel="noopener">SS/SSR 简介</a></p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><h4 id="优先阅读"><a href="#优先阅读" class="headerlink" title="优先阅读"></a>优先阅读</h4><p><a href="https://moe.best/tutorial/shadowsocksr.html" target="_blank" rel="noopener">[ShadowsocksR] 大概是萌新也看得懂的SSR功能详细介绍&amp;使用教程</a></p><p><a href="https://crifan.github.io/scientific_network_summary/website/server_client_mode/ss_client/client_windows.html" target="_blank" rel="noopener">Windows的ss客户端 · 珂学上网相关知识总结</a></p><p>一般的机场都提供教程，也可以谷歌，不再写操作流程了。</p><h3 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h3><p><a href="387099.blogspot.com/2018/03/ssssr.html">浅谈部分机场（SS/SSR提供商）的使用感受</a></p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p><a href="https://www.i5seo.com/shadowsocksr-clients-various-hidden-use-techniques.html" target="_blank" rel="noopener">ShadowsocksR 客户端 各种隐藏使用技巧说明</a></p><p><a href="https://blog.jimmyho.net/archives/365/" target="_blank" rel="noopener">ShadowsocksR简明使用教程</a></p><h4 id="小飞机的颜色"><a href="#小飞机的颜色" class="headerlink" title="小飞机的颜色"></a>小飞机的颜色</h4><table><thead><tr><th align="center">颜色</th><th align="center">全局</th><th align="center">PAC</th><th align="center">直连</th><th align="center">负载均衡</th></tr></thead><tbody><tr><td align="center">白</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">青</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">黄</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">绿</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">紫</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">蓝</td><td align="center"></td><td align="center"></td><td align="center">√</td><td align="center"></td></tr></tbody></table><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>对小飞机托盘图标操作</p><table><thead><tr><th align="center">操作</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">左键单击</td><td align="center">弹出编辑服务器窗口</td></tr><tr><td align="center">中键单击</td><td align="center">弹出服务器连接统计窗</td></tr><tr><td align="center">右键单击</td><td align="center">弹出菜单</td></tr></tbody></table><h3 id="SSTap"><a href="#SSTap" class="headerlink" title="SSTap"></a>SSTap</h3><p>软件介绍：SSTap全称SOCKSTap, 是一款利用虚拟网卡技术在网络层实现的代理工具。SSTap能在网络层拦截所有连接并转发给HTTP，SOCKS4，5，SHADOWSOCKS代理.而无需对被代理的应用程序做任何修改或设置。它能同时转发TCP,UDP数据包，它非常适合于游戏玩家使用。</p><h3 id="搭建一个ssr服务"><a href="#搭建一个ssr服务" class="headerlink" title="搭建一个ssr服务"></a>搭建一个ssr服务</h3><p>可以谷歌解决，如果日后有时间<del>金钱</del>玩vps的话，会补一个详细的教程。</p><h2 id="V2Ray"><a href="#V2Ray" class="headerlink" title="V2Ray"></a>V2Ray</h2><p>推荐阅读：<br><a href="https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b" target="_blank" rel="noopener">浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别</a></p><p>比SS | SSR更先进的工具之一，用了更多的技术手段。</p><p>V2Ray 是一个模块化的代理软件包，它的目标是提供常用的代理软件模块，简化网络代理软件的开发。</p><p>简单来说，它就是一个模块化代理，可以用来科学上网，支持多平台。</p><p><a href="https://www.v2ray.com/" target="_blank" rel="noopener">Project V · Project V 官方网站</a></p><p><a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">Github</a></p><h2 id="Brook"><a href="#Brook" class="headerlink" title="Brook"></a>Brook</h2><p><a href="https://github.com/txthinking/brook" target="_blank" rel="noopener">Github</a></p><h2 id="Tor"><a href="#Tor" class="headerlink" title="Tor"></a>Tor</h2><p><a href="https://www.torproject.org/index.html.en" target="_blank" rel="noopener">官网</a></p><h1 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h1><p>一个Chrome的插件</p><pre><code>Yet another flags</code></pre><p>可以很方便的显示服务器IP地址和地理位置。<br>效果：<br><img src="/images/chrome1.png" alt></p><hr><p>一个网站，可以测试网站是否被GFW屏蔽以及文本是否存在被审查的关键字</p><p><a href="https://zh.greatfire.org" target="_blank" rel="noopener">greatfire.org</a></p><h1 id="常用服务"><a href="#常用服务" class="headerlink" title="常用服务"></a>常用服务</h1><p>有GFW</p><h2 id="website"><a href="#website" class="headerlink" title="website"></a>website</h2><p><a href="https://www.google.com.hk" target="_blank" rel="noopener">Google</a></p><p><a href="https://www.youtube.com" target="_blank" rel="noopener">Youtube</a></p><p><a href="https://www.facebook.com" target="_blank" rel="noopener">Facebook</a></p><p><a href="https://twitter.com" target="_blank" rel="noopener">Twitter</a></p><p><a href="https://zh.wikipedia.org" target="_blank" rel="noopener">Wikipedia(zh_CN)</a></p><h2 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h2><p><a href="https://telegram.org" target="_blank" rel="noopener">Telegram</a></p><hr><p>无GFW</p><h2 id="website-1"><a href="#website-1" class="headerlink" title="website"></a>website</h2><p><a href="https://www.quora.com" target="_blank" rel="noopener">Quora</a></p><p><a href="https://github.com" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> PC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GFW </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
